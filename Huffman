import heapq
from collections import defaultdict, Counter

class Node:
    def __init__(self, char, freq):
        self.char = char
        self.freq = freq
        self.left = None
        self.right = None

    def __lt__(self, other):
        return self.freq < other.freq

def build_huffman_tree(text):
    frequency = Counter(text)
    priority_queue = [Node(char, freq) for char, freq in frequency.items()]
    heapq.heapify(priority_queue)

    while len(priority_queue) > 1:
        left = heapq.heappop(priority_queue)
        right = heapq.heappop(priority_queue)
        merged = Node(None, left.freq + right.freq)
        merged.left = left
        merged.right = right
        heapq.heappush(priority_queue, merged)

    return priority_queue[0]

def encode_huffman_tree(root):
    codes = {}

    def encode(node, code):
        if node:
            if node.char:
                codes[node.char] = code
            encode(node.left, code + '0')
            encode(node.right, code + '1')

    encode(root, '')
    return codes

# Example usage:
text = "Huffman coding is a data compression algorithm."
root = build_huffman_tree(text)
codes = encode_huffman_tree(root)
for char, code in codes.items():
    print(f"'{char}': {code}")
output:
'.': 00000
'u': 00001
'c': 0001
'i': 001
'a': 010
'n': 0110
'm': 0111
'e': 10000
't': 10001
's': 1001
' ': 101
'o': 1100
'r': 11010
'g': 11011
'f': 11100
'h': 111010
'l': 111011
'd': 11110
'p': 111110
'H': 111111
