import numpy as np

def strassen_matrix_multiply(A, B):
    n = len(A)

    # Base case: if the matrix size is 1x1
    if n == 1:
        return np.array([[A[0, 0] * B[0, 0]]])

    # Split matrices into quarters
    A11, A12 = A[:n//2, :n//2], A[:n//2, n//2:]
    A21, A22 = A[n//2:, :n//2], A[n//2:, n//2:]

    B11, B12 = B[:n//2, :n//2], B[:n//2, n//2:]
    B21, B22 = B[n//2:, :n//2], B[n//2:, n//2:]

    # Calculate intermediate matrices
    P1 = strassen_matrix_multiply(A11 + A22, B11 + B22)
    P2 = strassen_matrix_multiply(A21 + A22, B11)
    P3 = strassen_matrix_multiply(A11, B12 - B22)
    P4 = strassen_matrix_multiply(A22, B21 - B11)
    P5 = strassen_matrix_multiply(A11 + A12, B22)
    P6 = strassen_matrix_multiply(A21 - A11, B11 + B12)
    P7 = strassen_matrix_multiply(A12 - A22, B21 + B22)

    # Calculate result matrix quarters
    C11 = P1 + P4 - P5 + P7
    C12 = P3 + P5
    C21 = P2 + P4
    C22 = P1 - P2 + P3 + P6

    # Combine result matrix from quarters
    C = np.vstack((np.hstack((C11, C12)), np.hstack((C21, C22))))

    return C

# Example usage
A = np.array([[1, 2], [3, 4]])
B = np.array([[5, 6], [7, 8]])

result = strassen_matrix_multiply(A, B)
print(result)
